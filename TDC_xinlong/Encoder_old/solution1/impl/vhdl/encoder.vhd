-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    coarse_counter : IN STD_LOGIC_VECTOR (11 downto 0);
    delay_chain : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of encoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_encoder,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=33.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.314000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=100,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal trunc_ln28_fu_60_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_68_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_80_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_92_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln28_4_fu_112_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_5_fu_124_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_fu_164_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_3_fu_100_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_2_fu_88_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_1_fu_174_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_9_fu_180_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_8_fu_170_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_8_fu_184_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_2_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_14_fu_160_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_1_fu_76_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_3_fu_204_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_fu_64_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_6_fu_136_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_4_fu_214_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_12_fu_220_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_11_fu_210_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_9_fu_224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_5_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_2_fu_236_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_1_fu_196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln28_13_fu_240_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_10_fu_200_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_6_fu_250_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_7_fu_148_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln28_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fine_counter_fu_256_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_268_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln20_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_fu_278_p5 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    add_ln28_1_fu_174_p2 <= std_logic_vector(unsigned(zext_ln28_3_fu_100_p1) + unsigned(zext_ln28_2_fu_88_p1));
    add_ln28_2_fu_190_p2 <= std_logic_vector(unsigned(zext_ln28_9_fu_180_p1) + unsigned(zext_ln28_8_fu_170_p1));
    add_ln28_3_fu_204_p2 <= std_logic_vector(unsigned(zext_ln28_14_fu_160_p1) + unsigned(zext_ln28_1_fu_76_p1));
    add_ln28_4_fu_214_p2 <= std_logic_vector(unsigned(zext_ln28_fu_64_p1) + unsigned(zext_ln28_6_fu_136_p1));
    add_ln28_5_fu_230_p2 <= std_logic_vector(unsigned(zext_ln28_12_fu_220_p1) + unsigned(zext_ln28_11_fu_210_p1));
    add_ln28_6_fu_250_p2 <= std_logic_vector(unsigned(zext_ln28_13_fu_240_p1) + unsigned(zext_ln28_10_fu_200_p1));
    add_ln28_8_fu_184_p2 <= std_logic_vector(unsigned(add_ln28_1_fu_174_p2) + unsigned(add_ln28_fu_164_p2));
    add_ln28_9_fu_224_p2 <= std_logic_vector(unsigned(add_ln28_4_fu_214_p2) + unsigned(add_ln28_3_fu_204_p2));
    add_ln28_fu_164_p2 <= std_logic_vector(unsigned(zext_ln28_4_fu_112_p1) + unsigned(zext_ln28_5_fu_124_p1));
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_fu_278_p5),32));
    fine_counter_fu_256_p2 <= std_logic_vector(unsigned(add_ln28_6_fu_250_p2) + unsigned(zext_ln28_7_fu_148_p1));
    out_fu_278_p5 <= (((ap_const_lv1_0 & coarse_counter) & tmp_8_fu_268_p4) & xor_ln20_fu_262_p2);
    tmp_1_fu_80_p3 <= delay_chain(2 downto 2);
    tmp_2_fu_92_p3 <= delay_chain(3 downto 3);
    tmp_3_fu_104_p3 <= delay_chain(4 downto 4);
    tmp_4_fu_116_p3 <= delay_chain(5 downto 5);
    tmp_5_fu_128_p3 <= delay_chain(6 downto 6);
    tmp_6_fu_140_p3 <= delay_chain(7 downto 7);
    tmp_7_fu_152_p3 <= delay_chain(8 downto 8);
    tmp_8_fu_268_p4 <= fine_counter_fu_256_p2(3 downto 1);
    tmp_fu_68_p3 <= delay_chain(1 downto 1);
    trunc_ln28_1_fu_196_p1 <= add_ln28_8_fu_184_p2(1 - 1 downto 0);
    trunc_ln28_2_fu_236_p1 <= add_ln28_9_fu_224_p2(1 - 1 downto 0);
    trunc_ln28_fu_60_p1 <= delay_chain(1 - 1 downto 0);
    xor_ln20_fu_262_p2 <= (xor_ln28_fu_244_p2 xor tmp_6_fu_140_p3);
    xor_ln28_fu_244_p2 <= (trunc_ln28_2_fu_236_p1 xor trunc_ln28_1_fu_196_p1);
    zext_ln28_10_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_190_p2),4));
    zext_ln28_11_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_204_p2),3));
    zext_ln28_12_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_4_fu_214_p2),3));
    zext_ln28_13_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_230_p2),4));
    zext_ln28_14_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_152_p3),2));
    zext_ln28_1_fu_76_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_68_p3),2));
    zext_ln28_2_fu_88_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_80_p3),2));
    zext_ln28_3_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_92_p3),2));
    zext_ln28_4_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_104_p3),2));
    zext_ln28_5_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_116_p3),2));
    zext_ln28_6_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_128_p3),2));
    zext_ln28_7_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_140_p3),4));
    zext_ln28_8_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_164_p2),3));
    zext_ln28_9_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_174_p2),3));
    zext_ln28_fu_64_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln28_fu_60_p1),2));
end behav;
